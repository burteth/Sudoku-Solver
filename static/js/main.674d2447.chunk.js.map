{"version":3,"sources":["components/Square.js","components/Row.js","components/Board.js","components/backtrack.js","App.js","index.js"],"names":["Square","props","test","push","key","concat","row","col","toString","className","onClick","updateFunction","value","items","map","id","val","Board","matrix","rows","counter","i","length","Math","floor","Row","backtrack","solvedDict","valuesMatrix","j","complete","h","k","animations","start","getNext","sudokuNext","board","isValid","Animation","next","ignoreRow","ignoreCol","rowNum","colNum","number","quadRow","quadCol","type","this","index","App","generateMatrix","filled","started","randRow","randCol","randNum","getRndInteger","solution","newMatrix","state","solved","generateRandomBoard","newBoard","setState","stopCurrentSolution","resetBoard","clearBoard","ifColor","squares","document","getElementsByClassName","innerText","style","backgroundColor","updateBoard","timeouts","curAnimation","speed","getElementById","last","setTimeout","parseInt","getIndex","squareClicked","newVal","tempMatrix","makeMatrixNumerical","invalidCordList","invalidList","getInvalid","invalidIndexList","includes","clearTimeout","bind","currentanimations","min","max","defaultValue","JSON","parse","stringify","React","Component","random","ReactDOM","render"],"mappings":"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","file":"static/js/main.674d2447.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {\n  var test = [];\n  test.push(<div key={\"Tile #\".concat((props.row * 9 + props.col).toString())} className=\"square\" onClick={() => props.updateFunction(props.row,props.col,0)}>{props.value}</div>);\n  if ( ( (props.col + 1) % 3) === 0 && props.col !== 8) {\n    test.push(<div key={\"VerticalBar at Row #\".concat(props.row.toString()).concat(\" and Col #\").concat(props.col.toString())} className=\"verticalBar\"></div>);\n  }\n  return test\n}\nexport default Square\n","import React from 'react';\nimport Square from './Square'\n\nexport default ({items, updateFunction}) => (\n\n  <div className='rowComp'>{items.map(({row, col, id, val}) =>\n    <Square key={id} row={row} col={col} value={val} updateFunction={updateFunction}/>\n  )}</div>\n\n)\n","import React from 'react';\nimport Row from './Row'\n\n\nfunction Board(props) {\n  var matrix = props.matrix\n  var rows = [];\n  var counter = 0\n  for (var i = 0; i < matrix.length; i++) {\n    if (counter === 3){\n      counter = 0\n      rows.push(<div key={\"HorizontalBar #\".concat((Math.floor(i / 3).toString()))} className=\"horizontalBar\"></div>)\n    }\n    rows.push( <Row items = {matrix[i]} key={\"Row: \".concat(i.toString())} updateFunction={props.updateFunction} />)\n    counter = counter + 1\n\n  }\n  return rows\n}\nexport default Board\n\n/*\nexport default ({matrix}) => (\n\n\n  <div id='board'>\n    {matrix.map(\n      ({row}) => <Row items = {row}/>\n    )}\n  </div>\n)\n*/\n","\nfunction backtrack(matrix, solvedDict){\n\n    //Move all the values from the matrix over to an array\n    var valuesMatrix = [];\n    for (var i = 0; i < matrix.length; i++) {\n      valuesMatrix.push([])\n      for (var j = 0; j < matrix[i].length; j++) {\n          valuesMatrix[i].push(matrix[i][j].val)\n        }\n      }\n\n    // if the array has already been solved then return its solution\n    if ( valuesMatrix in solvedDict ){\n      return solvedDict[valuesMatrix];\n    }\n\n    // replace all \" \" with 0s\n    var complete = false;\n    for (var h = 0; h < 9; h++) {\n      for (var k = 0; k < 9; k++) {\n        if ( valuesMatrix[h][k] === \" \" ){\n          complete = true;\n          valuesMatrix[h][k] = 0;\n        }\n      }\n    }\n\n    if (!complete){\n      return([])\n    }\n\n    // Find the solution\n    var animations = [];\n    var start = getNext( valuesMatrix, -1, -1 );\n    var result = sudokuNext( valuesMatrix, start[0], start[1], animations )\n    if ( result === true ){\n      return(animations)\n    }else{\n      return([])\n    }\n\n}\nexport default backtrack;\n\nfunction sudokuNext( board, row, col, animations){\n  //If it seems like this isnt a valid solution then cancel everything\n  if (animations.length > 40000){\n    return false\n  }\n\n  for (var i = 1; i < 10; i++) {\n    if ( isValid( board, row, col, i ) ) {\n\n      animations.push(new Animation(\"increase\", row, col, i));\n      board[row][col] = i;\n      var next = getNext( board , row, col);\n\n      if (next === false){\n        return true\n      }\n      if (sudokuNext( board, next[0], next[1], animations ) ) {\n        return true\n      }else{\n        animations.push(new Animation(\"reset\", row, col, 0));\n        board[row][col] = 0\n      }\n\n    }\n\n  }\n  return false\n}\n\nfunction getNext( board, ignoreRow, ignoreCol ){\n\n  for (var i = 0; i < 9; i++) {\n    for (var j = 0; j < 9; j++) {\n        if (board[i][j] === 0){\n          if (i !== ignoreRow || j !== ignoreCol){\n            return [i, j];\n          }\n        }\n    }\n  }\n\n  return false\n}\n\nfunction isValid(board, rowNum, colNum, number){\n  //Determine if a number is valid in a position\n\n  //Check Row\n  for (var i = 0; i < 9; i++) {\n    if ( board[rowNum][i] === number ){\n      return false\n    }\n  }\n\n  //Check Col\n  for (i = 0; i < 9; i++) {\n    if ( board[i][colNum] === number ){\n      return false\n    }\n  }\n\n  //Check Quadrant\n\n  //Get quadrant lower limits\n  var quadRow = ( Math.floor(rowNum / 3) + 1 ) * 3 - 3;\n  var quadCol = ( Math.floor(colNum / 3) + 1 ) * 3 - 3;\n\n  for (var row = quadRow; row < quadRow + 3; row++) {\n    for (var col = quadCol; col < quadCol + 3; col++) {\n      if ( board[row][col] === number ){\n        return false\n      }\n    }\n  }\n\n  return true\n\n\n}\n\n\n\nclass Animation {\n  constructor( type, row, col, number){\n\n    this.type = type;\n    this.row = row;\n    this.col = col;\n    this.val = number;\n    this.index = 9 * row + col;\n\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Board from \"./components/Board.js\"\nimport backtrack from \"./components/backtrack.js\"\n\n /* eslint-disable */\n\nconst initialFilled = 27;\nconst squareBackgroundColor = \"#E9E9E9\";\nconst speed_max = 200;\nconst speed_min = 10;\n\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      matrix: this.generateMatrix(initialFilled, false),\n      solved: {},\n    };\n\n  }\n\n  componentDidMount() {\n    this.generateMatrix = this.generateMatrix.bind(this);\n    this.squareClicked = this.squareClicked.bind(this);\n    this.timeouts = [];\n    this.currentanimations = [];\n    }\n\n  generateMatrix = (filled, started) => {\n\n        var board =      [[0, 0, 0,  0, 0, 0,  0, 0, 0],\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0],\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0],\n\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0],\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0],\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0],\n\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0],\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0],\n                          [0, 0, 0,  0, 0, 0,  0, 0, 0]]\n\n        var counter = 0;\n        var randRow;\n        var randCol;\n        var randNum;\n        while ( counter < filled ){\n          randRow = getRndInteger(0,8);\n          randCol = getRndInteger(0,8);\n          randNum = getRndInteger(1,9);\n\n          if (isValid(board, randRow, randCol, randNum) && board[randRow][randCol] === 0){\n            board[randRow][randCol] = randNum;\n            counter += 1;\n          }\n\n        }\n\n\n        var newMatrix = [];\n        for (var i = 0; i < 9; i++) {\n          newMatrix.push([])\n          for (var j = 0; j < 9; j++) {\n            if ( board[i][j] === 0 ){\n              newMatrix[i].push({ val : \" \", row : i, col : j, id : i * 9 + j })\n            }else{\n              newMatrix[i].push({ val : board[i][j], row : i, col : j, id : i * 9 + j })\n            }\n          }\n        }\n        var solution;\n        if (started) {\n          solution = backtrack(newMatrix, this.state.solved);\n        }else{\n          solution = backtrack(newMatrix, {});\n        }\n\n        if ( solution.length !== 0 ){\n            if (started){\n              this.state.solved[newMatrix] = solution;\n            }\n            return newMatrix ;\n\n        }else{\n          return this.generateMatrix(filled, started);\n        }\n\n    }\n\n  generateRandomBoard = () => {\n    var newBoard = this.generateMatrix(initialFilled, true);\n    this.setState({matrix: newBoard});\n    this.stopCurrentSolution();\n    this.resetBoard(newBoard,true);\n  }\n\n  clearBoard = () => {\n    var newMatrix = [];\n    for (var i = 0; i < 9; i++) {\n      newMatrix.push([]);\n      for (var j = 0; j < 9; j++) {\n          newMatrix[i].push({ val : \" \", row : i, col : j, id : i * 9 + j });\n      }\n    }\n    this.setState({matrix : newMatrix})\n    this.stopCurrentSolution();\n    this.resetBoard(newMatrix, true);\n  }\n\n  resetBoard = (matrix, ifColor) => {\n\n    var squares = document.getElementsByClassName(\"square\");\n    for (var i = 0; i < matrix.length; i++) {\n      for (var j = 0; j < matrix[i].length; j++) {\n        squares[ i*9 + j ].innerText = matrix[i][j].val;\n        if (ifColor) {\n          squares[ i*9 + j ].style.backgroundColor = squareBackgroundColor;\n        }\n      }\n    }\n\n\n  }\n\n  updateBoard = (animations) => {\n\n    this.stopCurrentSolution();\n\n    this.state.solved = {};\n    this.timeouts = [];\n\n    var squares = document.getElementsByClassName(\"square\");\n    var counter = 0;\n    var k = 0;\n    //var speed = Math.abs((((-1 * (document.getElementById(\"speedrange\").value)) * speed_max / 100.0) + speed_max));\n    var speed = ( (-1 * ( (document.getElementById(\"speedrange\").value - speed_min) / (speed_max - speed_min) ) ) + 1  ) * 20000 / animations.length ;\n    var curAnimation;\n    var last = 0;\n    var index = 0;\n\n\n    while (counter < animations.length) {\n\n      this.timeouts.push(setTimeout(() => {\n\n        curAnimation = animations[k];\n\n        if (last !== 0){\n          last.style.backgroundColor = squareBackgroundColor;\n        }\n\n        index = curAnimation.index;\n        if ( curAnimation.type === \"increase\" ){\n\n            squares[index].style.backgroundColor = \"green\";\n            squares[index].innerText = curAnimation.val;\n            last = squares[index]\n        }else{\n\n          squares[index].style.backgroundColor = \"red\";\n          squares[index].innerText = \" \";\n          last = squares[index]\n        }\n        if ( k === animations.length - 1 ){\n          last.style.backgroundColor = squareBackgroundColor\n\n          for (var row = 0; row < 9; row++) {\n            for (var col = 0; col < 9; col++) {\n              this.state.matrix[row][col].val = parseInt(squares[getIndex(row,col)].innerText, 10);\n            }\n          }\n        }\n\n        k++;\n      }, counter * speed));\n      counter++;\n    };\n  }\n\n  squareClicked = (row, col) => {\n\n    this.stopCurrentSolution();\n\n    var tempMatrix = makeMatrixNumerical(this.state.matrix);\n    var value = this.state.matrix[row][col].val\n    var newVal;\n\n    if ( value === \" \"){\n      this.state.matrix[row][col].val = 1;\n      newVal = 1;\n\n    }else if ( value === 9 ){\n      this.state.matrix[row][col].val = \" \";\n      newVal = 0;\n    }else{\n      this.state.matrix[row][col].val = parseInt( value,10 ) + 1;\n      newVal = parseInt( value, 10 ) + 1;\n    }\n    tempMatrix[row][col] = newVal;\n\n    var invalidCordList = getInvalid(tempMatrix);\n    var invalidIndexList = [];\n    for (var i = 0; i < invalidCordList.length; i++) {\n      invalidIndexList.push(invalidCordList[i][0] * 9 + invalidCordList[i][1]);\n    }\n\n\n    var squares = document.getElementsByClassName(\"square\");\n    for (var i = 0; i < 81; i++) {\n      if ( invalidIndexList.includes(i) ){\n        squares[i].style.backgroundColor = \"red\";\n      }else{\n        squares[i].style.backgroundColor = squareBackgroundColor;\n      }\n    }\n    this.resetBoard(this.state.matrix, false);\n    }\n\n  stopCurrentSolution = () => {\n    //Clear all timeouts\n    for (var i = 0; i < this.timeouts.length; i++) {\n      clearTimeout(this.timeouts[i]);\n    }\n}\n\n  render() {\n\n    return (\n      <div id=\"UI_container\">\n        <div className=\"header\">\n          <div id=\"banner\">\n            <h1>Sudoku Solver Visualization</h1>\n          </div>\n\n        </div>\n        <div id=\"button_container\">\n          <div>\n\n          <button className=\"control_button\" onClick={() => this.clearBoard()}>Clear</button>\n          <button className=\"control_button\" onClick={() => this.generateRandomBoard()}>Randomize</button>\n\n          <div id=\"range_container\">\n            <div className=\"data_header\">Solving Speed:</div>\n            <input type=\"range\" className=\"slider\" id=\"speedrange\" min={speed_min} max={speed_max} defaultValue='50'></input>\n          </div>\n        </div>\n          <button className=\"control_button solve\" onClick={() => this.updateBoard(backtrack(JSON.parse(JSON.stringify(this.state.matrix)), this.state.solved))}>Solve</button>\n        </div>\n\n          <div id=\"boardContainerOuter\">\n            <div id=\"boardContainer\">\n              <Board key={\"Board\"} matrix={this.state.matrix} updateFunction={this.squareClicked}/>\n              </div>\n          </div>\n      </div>\n\n    );\n  }\n}\n\n\nfunction getIndex(row,col){\n  return (row * 9) + col\n}\n\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min) ) + min;\n}\n\nfunction isValid(board, rowNum, colNum, number){\n  //Determine if a number is valid in a position\n\n  //Check Row\n  for (var i = 0; i < 9; i++) {\n    if ( board[rowNum][i] === number && i !== colNum ){\n      return false\n    }\n  }\n\n  //Check Col\n  for (var j = 0; j < 9; j++) {\n    if ( board[j][colNum] === number  && j !== rowNum){\n      return false\n    }\n  }\n\n  //Check Quadrant\n\n  //Get quadrant lower limits\n  var quadRow = ( Math.floor(rowNum / 3) + 1 ) * 3 - 3;\n  var quadCol = ( Math.floor(colNum / 3) + 1 ) * 3 - 3;\n\n  for (var row = quadRow; row < quadRow + 3; row++) {\n    for (var col = quadCol; col < quadCol + 3; col++) {\n      if ( board[row][col] === number  && row !== rowNum && col !== colNum){\n        return false\n      }\n    }\n  }\n\n  return true\n\n\n}\n\nfunction getInvalid(board){\n\n  var invalidList = [];\n\n  for (var i = 0; i < 9; i++) {\n    for (var j = 0; j < 9; j++) {\n        if ( board[i][j] !== 0 && !isValid(board, i, j, board[i][j] ) ){\n          invalidList.push([i,j]);\n        }\n    }\n  }\n  return invalidList;\n}\n\nfunction makeMatrixNumerical( matrix ){\n\n  var newMatrix = []\n\n  for (var i = 0; i < 9; i++) {\n    newMatrix.push([])\n    for (var j = 0; j < 9; j++) {\n      if ( matrix[i][j].val == \" \" ){\n        newMatrix[i][j] = 0\n      }else{\n        newMatrix[i][j] = matrix[i][j].val\n      }\n    }\n  }\n  return newMatrix;\n}\n\n\n\n/*\n * squareClicked = (row, col) => {\n\n   var iteration = 0\n   var tempMatrix = makeMatrixNumerical(this.state.matrix);\n\n   var value = this.state.matrix[row][col].val\n\n   while (iteration < 9) {\n\n     if ( value === \" \"){\n       if ( isValid(tempMatrix, row, col, 1) ){\n         this.state.matrix[row][col].val = 1;\n         break;\n       }else{\n         value = 1;\n         iteration += 1\n       }\n\n     }else if ( value === 9 ){\n       this.state.matrix[row][col].val = \" \";\n       break;\n     }\n\n     if ( isValid(tempMatrix, row, col, value + 1) ){\n         this.state.matrix[row][col].val = parseInt(value,10) + 1;\n         break;\n       }\n\n     value += 1\n     iteration += 1;\n\n     }\n     this.resetBoard(this.state.matrix);\n   }\n */\n\n\n/*<div className=\"bars_and_data\">\n\n  <div id=\"interfaceOuter\">\n    <div id=\"interfaceInner\">\n\n\n\n      <div className=\"control_button_container\">\n\n\n      </div>\n\n      <div id=\"range_container\">\n\n        <div className=\"data_header\">Solving Speed</div>\n        <input type=\"range\" className=\"slider\" id=\"speedrange\" min=\"10\" max=\"200\" defaultValue='50'></input>\n\n      </div>\n\n    </div>\n  </div>\n  <div id=\"boardContainerOuter\">\n    <div id=\"boardContainer\">\n      <Board matrix={this.state.matrix} updateFunction={this.squareClicked}/>\n      </div>\n  </div>\n</div>\n</div>*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}